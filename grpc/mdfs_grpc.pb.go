// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: grpc/mdfs.proto

package mdfs_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChunkMasterServiceClient is the client API for ChunkMasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChunkMasterServiceClient interface {
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	GetFileChunks(ctx context.Context, in *File, opts ...grpc.CallOption) (*Chunks, error)
}

type chunkMasterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChunkMasterServiceClient(cc grpc.ClientConnInterface) ChunkMasterServiceClient {
	return &chunkMasterServiceClient{cc}
}

func (c *chunkMasterServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/ChunkMaster.ChunkMasterService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkMasterServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/ChunkMaster.ChunkMasterService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkMasterServiceClient) GetFileChunks(ctx context.Context, in *File, opts ...grpc.CallOption) (*Chunks, error) {
	out := new(Chunks)
	err := c.cc.Invoke(ctx, "/ChunkMaster.ChunkMasterService/GetFileChunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChunkMasterServiceServer is the server API for ChunkMasterService service.
// All implementations must embed UnimplementedChunkMasterServiceServer
// for forward compatibility
type ChunkMasterServiceServer interface {
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	GetFileChunks(context.Context, *File) (*Chunks, error)
	mustEmbedUnimplementedChunkMasterServiceServer()
}

// UnimplementedChunkMasterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChunkMasterServiceServer struct {
}

func (UnimplementedChunkMasterServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedChunkMasterServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedChunkMasterServiceServer) GetFileChunks(context.Context, *File) (*Chunks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileChunks not implemented")
}
func (UnimplementedChunkMasterServiceServer) mustEmbedUnimplementedChunkMasterServiceServer() {}

// UnsafeChunkMasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChunkMasterServiceServer will
// result in compilation errors.
type UnsafeChunkMasterServiceServer interface {
	mustEmbedUnimplementedChunkMasterServiceServer()
}

func RegisterChunkMasterServiceServer(s grpc.ServiceRegistrar, srv ChunkMasterServiceServer) {
	s.RegisterService(&ChunkMasterService_ServiceDesc, srv)
}

func _ChunkMasterService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkMasterServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChunkMaster.ChunkMasterService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkMasterServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkMasterService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkMasterServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChunkMaster.ChunkMasterService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkMasterServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkMasterService_GetFileChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkMasterServiceServer).GetFileChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChunkMaster.ChunkMasterService/GetFileChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkMasterServiceServer).GetFileChunks(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

// ChunkMasterService_ServiceDesc is the grpc.ServiceDesc for ChunkMasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChunkMasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChunkMaster.ChunkMasterService",
	HandlerType: (*ChunkMasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _ChunkMasterService_Heartbeat_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ChunkMasterService_List_Handler,
		},
		{
			MethodName: "GetFileChunks",
			Handler:    _ChunkMasterService_GetFileChunks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/mdfs.proto",
}

// ChunkHoarderServiceClient is the client API for ChunkHoarderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChunkHoarderServiceClient interface {
	GetChunk(ctx context.Context, in *GetChunkRequest, opts ...grpc.CallOption) (*GetChunkResponse, error)
	PutChunk(ctx context.Context, in *PutChunkRequest, opts ...grpc.CallOption) (*PutChunkResponse, error)
	ListChunks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Chunks, error)
}

type chunkHoarderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChunkHoarderServiceClient(cc grpc.ClientConnInterface) ChunkHoarderServiceClient {
	return &chunkHoarderServiceClient{cc}
}

func (c *chunkHoarderServiceClient) GetChunk(ctx context.Context, in *GetChunkRequest, opts ...grpc.CallOption) (*GetChunkResponse, error) {
	out := new(GetChunkResponse)
	err := c.cc.Invoke(ctx, "/ChunkMaster.ChunkHoarderService/GetChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkHoarderServiceClient) PutChunk(ctx context.Context, in *PutChunkRequest, opts ...grpc.CallOption) (*PutChunkResponse, error) {
	out := new(PutChunkResponse)
	err := c.cc.Invoke(ctx, "/ChunkMaster.ChunkHoarderService/PutChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkHoarderServiceClient) ListChunks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Chunks, error) {
	out := new(Chunks)
	err := c.cc.Invoke(ctx, "/ChunkMaster.ChunkHoarderService/ListChunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChunkHoarderServiceServer is the server API for ChunkHoarderService service.
// All implementations must embed UnimplementedChunkHoarderServiceServer
// for forward compatibility
type ChunkHoarderServiceServer interface {
	GetChunk(context.Context, *GetChunkRequest) (*GetChunkResponse, error)
	PutChunk(context.Context, *PutChunkRequest) (*PutChunkResponse, error)
	ListChunks(context.Context, *Empty) (*Chunks, error)
	mustEmbedUnimplementedChunkHoarderServiceServer()
}

// UnimplementedChunkHoarderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChunkHoarderServiceServer struct {
}

func (UnimplementedChunkHoarderServiceServer) GetChunk(context.Context, *GetChunkRequest) (*GetChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunk not implemented")
}
func (UnimplementedChunkHoarderServiceServer) PutChunk(context.Context, *PutChunkRequest) (*PutChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutChunk not implemented")
}
func (UnimplementedChunkHoarderServiceServer) ListChunks(context.Context, *Empty) (*Chunks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChunks not implemented")
}
func (UnimplementedChunkHoarderServiceServer) mustEmbedUnimplementedChunkHoarderServiceServer() {}

// UnsafeChunkHoarderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChunkHoarderServiceServer will
// result in compilation errors.
type UnsafeChunkHoarderServiceServer interface {
	mustEmbedUnimplementedChunkHoarderServiceServer()
}

func RegisterChunkHoarderServiceServer(s grpc.ServiceRegistrar, srv ChunkHoarderServiceServer) {
	s.RegisterService(&ChunkHoarderService_ServiceDesc, srv)
}

func _ChunkHoarderService_GetChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkHoarderServiceServer).GetChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChunkMaster.ChunkHoarderService/GetChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkHoarderServiceServer).GetChunk(ctx, req.(*GetChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkHoarderService_PutChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkHoarderServiceServer).PutChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChunkMaster.ChunkHoarderService/PutChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkHoarderServiceServer).PutChunk(ctx, req.(*PutChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkHoarderService_ListChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkHoarderServiceServer).ListChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChunkMaster.ChunkHoarderService/ListChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkHoarderServiceServer).ListChunks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ChunkHoarderService_ServiceDesc is the grpc.ServiceDesc for ChunkHoarderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChunkHoarderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChunkMaster.ChunkHoarderService",
	HandlerType: (*ChunkHoarderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChunk",
			Handler:    _ChunkHoarderService_GetChunk_Handler,
		},
		{
			MethodName: "PutChunk",
			Handler:    _ChunkHoarderService_PutChunk_Handler,
		},
		{
			MethodName: "ListChunks",
			Handler:    _ChunkHoarderService_ListChunks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/mdfs.proto",
}
